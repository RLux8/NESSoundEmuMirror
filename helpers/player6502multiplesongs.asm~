
ORG  $2000        
BEGIN:          ;this is where execution starts(boot ram)
	LDA #$00        ; re-hide vector ram overlay
	STA $4020 
	
	LDA #$55
	STA STATUSLEDS
	
	LDA #$0
	STA SELECTEDSONGOFFSL
	STA SELECTEDSONGOFFSM
	STA SELECTEDSONGOFFSH

	LDA SONGSEL
	STA SELECTEDSONG
	STA $0
	LDA $8000
	CMP $0
	BCC SONGNUMERR ; selected song number larger than available songs - 1?
	BEQ SONGNUMERR

	; now calculate the nsf base offset
	; calc offset
	LDA SELECTEDSONG
	CLC
	ASL A
	ASL A
	ADC #$1
	TAX
	; store the offset in the boot ram
	LDA $8001, X
	STA SELECTEDSONGOFFSL
	LDA $8002, X
	STA SELECTEDSONGOFFSM
	LDA $8003, X
	STA SELECTEDSONGOFFSH
	
	; setup the bankswitcher to get access to the header of the selected .nsf file
	LDA SELECTEDSONGOFFSL
	STA BKSWOFFSL

	LDA SELECTEDSONGOFFSM
	STA BKSWOFFSM
	
	LDA SELECTEDSONGOFFSH
	STA BKSWOFFSH


	; check for supported NSf version
	LDA $8005
	CMP #$01
	BNE NSFVERERR


	; check for ntsc tune...we dont support PAL(maybe in the future?)
	LDA $807A
	CMP #$01
	BEQ REGIONERR


	;setup nes mixer..
	LDA $807B
	STA APUMIXCTRL
	
	JMP COPYHEADER


SONGNUMERR:
	LDA #$04
	STA SONGSEL
	JMP LOCALERR

NSFVERERR: 
	LDA #$05
	STA SONGSEL
	JMP LOCALERR

REGIONERR: 
	LDA #$06
	STA SONGSEL
	JMP LOCALERR

LOCALERR: JMP LOCALERR


COPYHEADER:
	; copy the file header(wont be accessible after bank switching...)


    	LDA #$00
   	STA $FB
    	LDA #$80
    	STA $FC
    	LDA #$00
    	STA $FD
    	LDA #$2E
    	STA $FE
	LDY #$0

NSFHEADERLOOP:
	LDA ($FB),Y
	STA ($FD),Y
	INY
	CPY #$80
	BNE NSFHEADERLOOP



	; check for bank switch settings
	LDA #$00
	STA $FD
	LDA #$2E
	STA $FE
	LDY #$70

NSFBKSWCHECKLOOP:
	LDA ($FD),Y
	BNE BANKWASNOTZERO
	INY
	CPY #$77
	BNE NSFBKSWCHECKLOOP

	; all bank switch init bytes were zero, do not use bank switching...setup linear memory map
	LDA #$00
	STA BKSWPAGENUMS
	LDA #$01
	STA BKSWPAGENUMS+1
	LDA #$02
	STA BKSWPAGENUMS+2
	LDA #$03
	STA BKSWPAGENUMS+3
	LDA #$04
	STA BKSWPAGENUMS+4
	LDA #$05
	STA BKSWPAGENUMS+5
	LDA #$06
	STA BKSWPAGENUMS+6
	LDA #$07
	STA BKSWPAGENUMS+7
	LDA #$00
	STA BKSWEN
	JMP BKSWTABLEDONE

BANKWASNOTZERO:
	LDA #$01
	STA BKSWEN

	; load initial bank switch settings...
	LDA #$70
	STA $FB
	LDA #$2E
	STA $FC
	LDA #$F8
	STA $FD
	LDA #$5F
	STA $FE
	LDY #$0

NSFBKSWCOPYLOOP:
	LDA ($FB),Y
	STA ($FD),Y
	INY
	CPY #$7
	BNE NSFBKSWCOPYLOOP

BKSWTABLEDONE:
; bank table is done, now calculate required offset as given in nsf header
; offset required is: OFF = NSF_BASE_OFFSET + $80 - (LOAD_ADDR - $8000)
; eg: loadaddr 8CD9, base offset 0D => FF3B4

; use ZP 0 for high byte of load address with cleared highest bit

	LDA #$0
	STA $0
	
	; first calculate NSF_BASE_OFFSET + $80
	CLC
	LDA SELECTEDSONGOFFSL
	ADC #$80
	STA SELECTEDSONGOFFSL
	LDA SELECTEDSONGOFFSM
	ADC $0
	STA SELECTEDSONGOFFSM
	LDA SELECTEDSONGOFFSH
	ADC $0
	STA SELECTEDSONGOFFSH 

	; now calculate LOAD_ADDR - $8000
	LDA HDRLOADADDRH
	AND #$7F
	STA $0
	
	; now do the big subtraction....
	SEC ; no borrow
	LDA SELECTEDSONGOFFSL
	SBC HDRLOADADDRL
	STA BKSWOFFSL
	
	LDA SELECTEDSONGOFFSM
	SBC $0
	STA BKSWOFFSM
	LDA SELECTEDSONGOFFSH
	SBC #$0
	STA BKSWOFFSH


	; setup apu registers....
	LDA #$00
	STA $FD
	LDA #$40
	STA $FE
	LDY #$0
	LDA #$0

CLEARAPULOOP:
	STA ($FD),Y
	INY
	CPY #$13
	BNE CLEARAPULOOP

	; setup apu status, frame control as per .nsf spec
	LDA #$0F
	STA APUSTATUSREG
	LDA #$40
	STA FRAMECTRCTRL

	; call init routine
	; self modifying code madness.....
	LDA HDRINITADDRL
	STA $2201
	LDA HDRINITADDRH
	STA $2202

	LDA #$02
	STA STATUSLEDS

	; clear used ram
	; 0x200-0x7ff
	CLC
	LDA #$02
	STA $1
	LDA #$0
	STA $0

CLEARNEXTREGION:
	LDA #$00        ;Set up zero value
        TAY             ;Initialize index pointer
CLRM1:  STA ($0),Y   ;Clear memory location
        INY             ;Advance index pointer
        DEX             ;Decrement counter
        BNE CLRM1       ;Not zero, continue checking
	
	
	LDA $1
	ADC #$1
	STA $1
	CMP #$8
	BNE CLEARNEXTREGION
	
	LDA #$0
	STA $1
	STA $0
	
	LDA #$00        ;Set up zero value
        TAY             ;Initialize index pointer
CLRZP:  STA ($0),Y   ;Clear memory location
        INY             ;Advance index pointer
        DEX             ;Decrement counter
        BNE CLRZP       ;Not zero, continue checking

	; setup A, X, Y
	LDA #$0
	LDX #$0 ; for NTSC tune....
	LDY #$0

	; now branch to init
	JMP INITJSRLOCATION
ORG $2200
	INITJSRLOCATION:
	JSR $0000


	; setup interrupt-triggered call of play routine
	LDA #$00
	STA IRQSHADOWREGL
	STA CURRENTLYINPLAYROUT
	LDA #$23
	STA IRQSHADOWREGH
	; modify call address
	LDA HDRPLAYADDRL
	STA $2321
	LDA HDRPLAYADDRH
	ORA #$80
	STA $2322
	
	LDA HDRNTSCSPEEDH
	STA TIMERHIGHPERIOD
	
	LDA HDRNTSCSPEEDL
	STA TIMERLOWPERIOD
	
	LDA #$03
	STA TIMERMODE

	LDA #$01
	STA SONGSEL

	; disable frame interrupt
	LDA #$00
	STA FRAMECTRCTRL
	
	; enable interrupts and enter an endless loop
	CLI
WAITLOOP:
	JMP WAITLOOP

; irq handler ____ WARNING: ANY CHANGEs IN HERE NEEDS TO BE REFLECTED IN MODIFICATION OF PLAY ROUTINE START ADDRESS MODIFICATION ________
ORG $2300
	
	SEI
	
	PHA
	; clear frame interrupt
	LDA APUSTATUSREG

	; clear irq from rate timer
	LDA #$03
	STA TIMERMODE

	; disable vector overlay (just write to the overlay RAM once...)
	LDA #$00
	STA $4021
	
	; update status leds
	LDA #$02
	STA STATUSLEDS

	; check if we managed to finish the play routine before the current interrupt came in
	LDA CURRENTLYINPLAYROUT
	CMP #$0
	; in theory we should not call the play routine if the last call did not finish
	; no? dont call it again
<<<<<<< HEAD
	;BNE ISRDONE
	NOP
	NOP
=======
	BNE ISRDONE
	;NOP
	;NOP
>>>>>>> f83ae80613592ac6ce1b9cd87a3f9e5052a9cdea

	; we are okay to run the play routine
	LDA #$01
	STA CURRENTLYINPLAYROUT

	; actual play routine call (call address will be modified by setup code)
	JSR $0000
	
	; remember that we returned from the last play routine call
	LDA #$00
	STA CURRENTLYINPLAYROUT
	
	LDA #$00
	STA FRAMECTRCTRL
ISRDONE:
	
	; update status leds
	LDA #$03
	STA STATUSLEDS
	
	PLA
	
	CLI
	RTI


ERR:

ERRLOOP:
JMP ERRLOOP

ORG $2E00
DB 0,0,0,0,0
HDRVERNUM:
DB 0
HDRTOTALSONGNUM:
DB 0
HDRSTARTSONGNUM:
DB 0
HDRLOADADDRL:
DB 0
HDRLOADADDRH:
DB 0
HDRINITADDRL:
DB 0
HDRINITADDRH:
DB 0
HDRPLAYADDRL:
DB 0
HDRPLAYADDRH:
DB 0
ORG $2E6E
HDRNTSCSPEEDL:
DB 0
HDRNTSCSPEEDH:
DB 0
HDRBANKS:
DB 0,0,0,0,0,0,0,0
HDRPALSPEED:
DW 0
DB 0
DB 0
DW 0, 0

CURRENTLYINPLAYROUT:
DB 0

SELECTEDSONG:
DB 0

SELECTEDSONGOFFSL:
DB 0
SELECTEDSONGOFFSM:
DB 0
SELECTEDSONGOFFSH:
DB 0


ORG $5FF0
BKSWOFFSL:
DB 0
BKSWOFFSM:
DB 0
BKSWOFFSH:
DB 0
APUMIXCTRL:
DB 0



ORG $4015
APUSTATUSREG:
DB 0

ORG $4017
FRAMECTRCTRL:
DB 0

ORG $4020
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
NMISHADOWREGL:
DB 0
NMISHADOWREGH:
DB 0
RESSHADOWREGL:
DB 0
RESSHADOWREGH:
DB 0
IRQSHADOWREGL:
DB 0
IRQSHADOWREGH:
DB 0

ORG $4030
TIMERMODE:
DB 0
TIMERLOWPERIOD:
DB 0
TIMERHIGHPERIOD:
DB 0

ORG $4040
SONGSEL:
STATUSLEDS:
DB 0

ORG $4050
BKSWOFFSL:
DB 0
BKSWOFFSM:
DB 0
BKSWOFFSH:
DB 0
ORG $4054
BKSWEN:
SB 0

ORG $5FF8
BKSWPAGENUMS:
DB 0, 0, 0, 0, 0, 0, 0, 0
