--
-- VHDL Architecture audiotest_lib.dmcchannnel.struct
--
-- Created:
--          by - redacted.redacted (pc023)
--          at - 14:36:04 02/02/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
library audiotest_lib; use audiotest_lib.booleanvectors.all;


ARCHITECTURE struct OF dmcchannnel IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL decLevel              : boolean;
   SIGNAL enableplayback        : boolean;
   SIGNAL halfsampledone        : boolean;
   SIGNAL incLevel              : boolean;
   SIGNAL loadcurrentaddrandlen : boolean;
   SIGNAL loadval               : boolean_vector(6 DOWNTO 0);
   SIGNAL loadvalue             : boolean;
   SIGNAL loopenable            : boolean;
   SIGNAL periodsetting         : boolean_vector(3 DOWNTO 0);
   SIGNAL playbackdone          : boolean;
   SIGNAL playsample            : boolean;
   SIGNAL sample                : boolean_vector(7 DOWNTO 0);
   SIGNAL sampledone            : boolean;
   SIGNAL sampleencaddr         : boolean_vector(7 DOWNTO 0);
   SIGNAL sampleenclength       : boolean_vector(7 DOWNTO 0);
   SIGNAL tick                  : boolean;
   SIGNAL updateperiod          : boolean;


   -- Component Declarations
   COMPONENT dmcmemoryReader
   PORT (
      clk                   : IN     std_logic ;
      cpuclk                : IN     boolean ;
      dmcdata               : IN     boolean_vector (7 DOWNTO 0);
      dmcreadack            : IN     boolean ;
      enableplayback        : IN     boolean ;
      halfsampledone        : IN     boolean ;
      loadcurrentaddrandlen : IN     boolean ;
      loopenable            : IN     boolean ;
      res_n                 : IN     std_logic ;
      sampledone            : IN     boolean ;
      sampleencaddr         : IN     boolean_vector (7 DOWNTO 0);
      sampleenclength       : IN     boolean_vector (7 DOWNTO 0);
      dmcaddr               : OUT    boolean_vector (15 DOWNTO 0);
      dmcreadreq            : OUT    boolean ;
      playbackdone          : OUT    boolean ;
      playsample            : OUT    boolean ;
      sample                : OUT    boolean_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dmcoutputlevel
   PORT (
      clk       : IN     std_logic ;
      cpuclk    : IN     boolean ;
      decLevel  : IN     boolean ;
      incLevel  : IN     boolean ;
      loadval   : IN     boolean_vector (6 DOWNTO 0);
      loadvalue : IN     boolean ;
      res_n     : IN     std_logic ;
      level     : OUT    boolean_vector (6 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dmcsampleshifter
   GENERIC (
      reversesamplebyte : boolean := false
   );
   PORT (
      clk            : IN     std_logic ;
      cpuclk         : IN     boolean ;
      playsample     : IN     boolean ;
      res_n          : IN     std_logic ;
      sample         : IN     boolean_vector (7 DOWNTO 0);
      tick           : IN     boolean ;
      decLevel       : OUT    boolean ;
      halfsampledone : OUT    boolean ;
      incLevel       : OUT    boolean ;
      sampledone     : OUT    boolean 
   );
   END COMPONENT;
   COMPONENT dmctimer
   PORT (
      clk           : IN     std_logic ;
      cpuclk        : IN     boolean ;
      periodsetting : IN     boolean_vector (3 DOWNTO 0);
      res_n         : IN     std_logic ;
      updateperiod  : IN     boolean ;
      tick          : OUT    boolean 
   );
   END COMPONENT;
   COMPONENT dmcwriteport
   PORT (
      addr                  : IN     boolean_vector (1 DOWNTO 0);
      clearintflag          : IN     boolean ;
      clk                   : IN     std_logic ;
      data                  : IN     boolean_vector (7 DOWNTO 0);
      enabled               : IN     boolean ;
      playbackdone          : IN     boolean ;
      res_n                 : IN     std_logic ;
      wr                    : IN     boolean ;
      enableplayback        : OUT    boolean ;
      irq                   : OUT    boolean ;
      loadcurrentaddrandlen : OUT    boolean ;
      loadval               : OUT    boolean_vector (6 DOWNTO 0);
      loadvalue             : OUT    boolean ;
      loopenable            : OUT    boolean ;
      periodsetting         : OUT    boolean_vector (3 DOWNTO 0);
      playingsample         : OUT    boolean ;
      sampleencaddr         : OUT    boolean_vector (7 DOWNTO 0);
      sampleenclength       : OUT    boolean_vector (7 DOWNTO 0);
      updateperiod          : OUT    boolean 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : dmcmemoryReader USE ENTITY audiotest_lib.dmcmemoryReader;
   FOR ALL : dmcoutputlevel USE ENTITY audiotest_lib.dmcoutputlevel;
   FOR ALL : dmcsampleshifter USE ENTITY audiotest_lib.dmcsampleshifter;
   FOR ALL : dmctimer USE ENTITY audiotest_lib.dmctimer;
   FOR ALL : dmcwriteport USE ENTITY audiotest_lib.dmcwriteport;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   dmcmemrd : dmcmemoryReader
      PORT MAP (
         clk                   => clk,
         cpuclk                => cpuclk,
         dmcdata               => dmcdata,
         dmcreadack            => dmcreadack,
         enableplayback        => enableplayback,
         halfsampledone        => halfsampledone,
         loadcurrentaddrandlen => loadcurrentaddrandlen,
         loopenable            => loopenable,
         res_n                 => res_n,
         sampledone            => sampledone,
         sampleencaddr         => sampleencaddr,
         sampleenclength       => sampleenclength,
         dmcaddr               => dmcaddr,
         dmcreadreq            => dmcreadreq,
         playbackdone          => playbackdone,
         playsample            => playsample,
         sample                => sample
      );
   dmcolev : dmcoutputlevel
      PORT MAP (
         clk       => clk,
         cpuclk    => cpuclk,
         decLevel  => decLevel,
         incLevel  => incLevel,
         loadval   => loadval,
         loadvalue => loadvalue,
         res_n     => res_n,
         level     => level
      );
   dmcshft : dmcsampleshifter
      PORT MAP (
         clk            => clk,
         cpuclk         => cpuclk,
         playsample     => playsample,
         res_n          => res_n,
         sample         => sample,
         tick           => tick,
         decLevel       => decLevel,
         halfsampledone => halfsampledone,
         incLevel       => incLevel,
         sampledone     => sampledone
      );
   dmctim : dmctimer
      PORT MAP (
         clk           => clk,
         cpuclk        => cpuclk,
         periodsetting => periodsetting,
         res_n         => res_n,
         updateperiod  => updateperiod,
         tick          => tick
      );
   dmcwp : dmcwriteport
      PORT MAP (
         addr                  => addr,
         clearintflag          => clearintflag,
         clk                   => clk,
         data                  => data,
         enabled               => enabled,
         playbackdone          => playbackdone,
         res_n                 => res_n,
         wr                    => wr,
         enableplayback        => enableplayback,
         irq                   => irq,
         loadcurrentaddrandlen => loadcurrentaddrandlen,
         loadval               => loadval,
         loadvalue             => loadvalue,
         loopenable            => loopenable,
         periodsetting         => periodsetting,
         playingsample         => playingsample,
         sampleencaddr         => sampleencaddr,
         sampleenclength       => sampleenclength,
         updateperiod          => updateperiod
      );

END struct;
