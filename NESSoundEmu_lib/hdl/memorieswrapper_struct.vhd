--
-- VHDL Architecture audiotest_lib.memorieswrapper.struct
--
-- Created:
--          by - redacted.redacted (pc023)
--          at - 12:36:29 03/11/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
library audiotest_lib; use audiotest_lib.booleanvectors.all;


ARCHITECTURE struct OF memorieswrapper IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addrlow11         : boolean_vector(10 DOWNTO 0);
   SIGNAL addrlow12stdlog   : STD_LOGIC_VECTOR(11 DOWNTO 0);
   SIGNAL addrlow13         : boolean_vector(12 DOWNTO 0);
   SIGNAL addrlow15         : boolean_vector(14 DOWNTO 0);
   SIGNAL addrlow3          : boolean_vector(2 DOWNTO 0);
   SIGNAL addrlow4          : boolean_vector(3 DOWNTO 0);
   SIGNAL bootRAMdata       : boolean_vector(7 DOWNTO 0);
   SIGNAL bootRAMwr         : std_logic;
   SIGNAL bootromdatastdlog : std_logic_vector(7 DOWNTO 0);
   SIGNAL datastdlog        : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL highsysramdataout : boolean_vector(7 DOWNTO 0);
   SIGNAL highsysramwr      : boolean;
   SIGNAL lowsysramdataout  : boolean_vector(7 DOWNTO 0);
   SIGNAL lowsysramwr       : boolean;
   SIGNAL memdatain         : boolean_byte;
   SIGNAL songRAMdata       : boolean_vector(7 DOWNTO 0);
   SIGNAL songaddr          : boolean_vector(23 DOWNTO 0);
   SIGNAL vectorRAMdata     : boolean_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT addrdecodereadmem
   PORT (
      addr              : IN     boolean_vector (15 DOWNTO 0);
      bootRAMdata       : IN     boolean_vector (7 DOWNTO 0);
      clk               : IN     std_logic ;
      highsysramdataout : IN     boolean_vector (7 DOWNTO 0);
      lowsysramdataout  : IN     boolean_vector (7 DOWNTO 0);
      overlayvectors    : IN     boolean ;
      rd                : IN     boolean ;
      res_n             : IN     std_logic ;
      songRAMdata       : IN     boolean_vector (7 DOWNTO 0);
      vectorRAMdata     : IN     boolean_vector (7 DOWNTO 0);
      wr                : IN     boolean ;
      accesswait        : OUT    std_logic ;
      bootRAMwr         : OUT    std_logic ;
      highsysramwr      : OUT    boolean ;
      lowsysramwr       : OUT    boolean ;
      memdatain         : OUT    boolean_byte ;
      data              : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT bankswitcher
   PORT (
      clk      : IN     std_logic ;
      confaddr : IN     boolean_vector (3 DOWNTO 0);
      confdata : IN     boolean_vector (7 DOWNTO 0);
      res_n    : IN     std_logic ;
      virtaddr : IN     boolean_vector (14 DOWNTO 0);
      wr       : IN     boolean ;
      physaddr : OUT    boolean_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT initialisableRAM
   GENERIC (
      addrw : integer := 2;
      dataw : integer := 8
   );
   PORT (
      addr  : IN     boolean_vector (addrw-1 DOWNTO 0);
      clk   : IN     std_logic ;
      d     : IN     boolean_vector (dataw-1 DOWNTO 0);
      res_n : IN     std_logic ;
      wr    : IN     boolean ;
      q     : OUT    boolean_vector (dataw-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT quartusNESbootROM
   PORT (
      address : IN     STD_LOGIC_VECTOR (11 DOWNTO 0);
      clock   : IN     STD_LOGIC  := '1';
      data    : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      wren    : IN     STD_LOGIC;
      q       : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT quartuscompatibleram
   GENERIC (
      data_width : natural;
      addr_width : natural
   );
   PORT (
      clk           : IN     std_logic;
      data          : IN     boolean_vector (data_width-1 DOWNTO 0);
      read_address  : IN     boolean_vector (addr_width-1 DOWNTO 0);
      we            : IN     boolean;
      write_address : IN     boolean_vector (addr_width-1 DOWNTO 0);
      q             : OUT    boolean_vector (data_width-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT songRAMwrapper
   PORT (
      addr : IN     boolean_vector (23 DOWNTO 0);
      clk  : IN     std_logic ;
      q    : OUT    boolean_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : addrdecodereadmem USE ENTITY audiotest_lib.addrdecodereadmem;
   FOR ALL : bankswitcher USE ENTITY audiotest_lib.bankswitcher;
   FOR ALL : initialisableRAM USE ENTITY audiotest_lib.initialisableRAM;
   FOR ALL : quartusNESbootROM USE ENTITY audiotest_lib.quartusNESbootROM;
   FOR ALL : quartuscompatibleram USE ENTITY audiotest_lib.quartuscompatibleram;
   FOR ALL : songRAMwrapper USE ENTITY audiotest_lib.songRAMwrapper;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 constantsandresetinersion1
   -- eb1 1 
   addrlow11 <= addr(10 downto 0);
   addrlow13 <= addr(12 downto 0);
   addrlow15 <= addr(14 downto 0);
   addrlow3 <= addr(2 downto 0);
   addrlow4 <= addr(3 downto 0);
   bootRAMdata  <= std_logic_vector2bool_vec(bootromdatastdlog);
   addrlow12stdlog <= bool_vec2std_logic_vector(addr(11 downto 0));
   datastdlog <= bool_vec2std_logic_vector(memdatain);                              


   -- Instance port mappings.
   addrmemdecodi : addrdecodereadmem
      PORT MAP (
         addr              => addr,
         bootRAMdata       => bootRAMdata,
         clk               => clk,
         highsysramdataout => highsysramdataout,
         lowsysramdataout  => lowsysramdataout,
         overlayvectors    => overlayvectors,
         rd                => rd,
         res_n             => res_n,
         songRAMdata       => songRAMdata,
         vectorRAMdata     => vectorRAMdata,
         wr                => wr,
         accesswait        => accesswait,
         bootRAMwr         => bootRAMwr,
         highsysramwr      => highsysramwr,
         lowsysramwr       => lowsysramwr,
         memdatain         => memdatain,
         data              => data
      );
   bkswi : bankswitcher
      PORT MAP (
         clk      => clk,
         confaddr => addrlow4,
         confdata => memdatain,
         res_n    => res_n,
         virtaddr => addrlow15,
         wr       => bkswwr,
         physaddr => songaddr
      );
   vectorsram : initialisableRAM
      GENERIC MAP (
         addrw => 3,
         dataw => 8
      )
      PORT MAP (
         addr  => addrlow3,
         clk   => clk,
         d     => memdatain,
         res_n => res_n,
         wr    => vectorramwr,
         q     => vectorRAMdata
      );
   bootRAM : quartusNESbootROM
      PORT MAP (
         address => addrlow12stdlog,
         clock   => clk,
         data    => datastdlog,
         wren    => bootRAMwr,
         q       => bootromdatastdlog
      );
   highsysram : quartuscompatibleram
      GENERIC MAP (
         data_width => 8,
         addr_width => 13
      )
      PORT MAP (
         clk           => clk,
         data          => memdatain,
         write_address => addrlow13,
         read_address  => addrlow13,
         we            => highsysramwr,
         q             => highsysramdataout
      );
   lowsysram : quartuscompatibleram
      GENERIC MAP (
         data_width => 8,
         addr_width => 11
      )
      PORT MAP (
         clk           => clk,
         data          => memdatain,
         write_address => addrlow11,
         read_address  => addrlow11,
         we            => lowsysramwr,
         q             => lowsysramdataout
      );
   songwrapi : songRAMwrapper
      PORT MAP (
         addr => songaddr,
         clk  => clk,
         q    => songRAMdata
      );

END struct;
