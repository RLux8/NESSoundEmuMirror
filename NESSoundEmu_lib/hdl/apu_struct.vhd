--
-- VHDL Architecture audiotest_lib.apu.struct
--
-- Created:
--          by - redacted.redacted (pc023)
--          at - 16:10:48 03/08/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
library audiotest_lib; use audiotest_lib.booleanvectors.all;


ARCHITECTURE struct OF apu IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addrlow2          : boolean_vector(1 DOWNTO 0);
   SIGNAL dmcclearintflag   : boolean;
   SIGNAL dmcenabled        : boolean;
   SIGNAL dmcirq            : boolean;
   SIGNAL dmcmix            : boolean_vector(6 DOWNTO 0);
   SIGNAL dmcwr             : boolean;
   SIGNAL fclk              : boolean;
   SIGNAL frameint          : boolean;
   SIGNAL frctrclearintflag : boolean;
   SIGNAL genint            : boolean;
   SIGNAL hfclk             : boolean;
   SIGNAL mode              : boolean;
   SIGNAL noiseenabled      : boolean;
   SIGNAL noiseleniszero    : boolean;
   SIGNAL noisemix          : boolean_vector(3 DOWNTO 0);
   SIGNAL noisewr           : boolean;
   SIGNAL p1enabled         : boolean;
   SIGNAL p1leniszero       : boolean;
   SIGNAL p1mix             : boolean_vector(3 DOWNTO 0);
   SIGNAL p1wr              : boolean;
   SIGNAL p2enabled         : boolean;
   SIGNAL p2leniszero       : boolean;
   SIGNAL p2mix             : boolean_vector(3 DOWNTO 0);
   SIGNAL p2wr              : boolean;
   SIGNAL playingsample     : boolean;
   SIGNAL qfclk             : boolean;
   SIGNAL resctr            : boolean;
   SIGNAL trienabled        : boolean;
   SIGNAL triiszero         : boolean;
   SIGNAL trimix            : boolean_vector(3 DOWNTO 0);
   SIGNAL triwr             : boolean;
   SIGNAL wrdata            : boolean_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT apumixer
   PORT (
      dmcmix   : IN     boolean_vector (6 DOWNTO 0);
      noisemix : IN     boolean_vector (3 DOWNTO 0);
      p1mix    : IN     boolean_vector (3 DOWNTO 0);
      p2mix    : IN     boolean_vector (3 DOWNTO 0);
      trimix   : IN     boolean_vector (3 DOWNTO 0);
      mix      : OUT    boolean_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT apustatusandaddrdec
   PORT (
      addr              : IN     boolean_vector (4 DOWNTO 0);
      clk               : IN     std_logic ;
      cpuclk            : IN     boolean ;
      dmcirq            : IN     boolean ;
      frameint          : IN     boolean ;
      noiseleniszero    : IN     boolean ;
      p1leniszero       : IN     boolean ;
      p2leniszero       : IN     boolean ;
      playingsample     : IN     boolean ;
      rd                : IN     boolean ;
      res_n             : IN     std_logic ;
      triiszero         : IN     boolean ;
      wr                : IN     boolean ;
      addrlow2          : OUT    boolean_vector (1 DOWNTO 0);
      dmcclearintflag   : OUT    boolean ;
      dmcenabled        : OUT    boolean ;
      dmcwr             : OUT    boolean ;
      frctrclearintflag : OUT    boolean ;
      genint            : OUT    boolean ;
      irq               : OUT    boolean ;
      mode              : OUT    boolean ;
      noiseenabled      : OUT    boolean ;
      noisewr           : OUT    boolean ;
      p1enabled         : OUT    boolean ;
      p1wr              : OUT    boolean ;
      p2enabled         : OUT    boolean ;
      p2wr              : OUT    boolean ;
      resctr            : OUT    boolean ;
      trienabled        : OUT    boolean ;
      triwr             : OUT    boolean ;
      wrdata            : OUT    boolean_vector (7 DOWNTO 0);
      data              : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dmcchannnel
   PORT (
      addr          : IN     boolean_vector (1 DOWNTO 0);
      clearintflag  : IN     boolean ;
      clk           : IN     std_logic ;
      cpuclk        : IN     boolean ;
      data          : IN     boolean_vector (7 DOWNTO 0);
      dmcdata       : IN     boolean_vector (7 DOWNTO 0);
      dmcreadack    : IN     boolean ;
      enabled       : IN     boolean ;
      res_n         : IN     std_logic ;
      wr            : IN     boolean ;
      dmcaddr       : OUT    boolean_vector (15 DOWNTO 0);
      dmcreadreq    : OUT    boolean ;
      irq           : OUT    boolean ;
      level         : OUT    boolean_vector (6 DOWNTO 0);
      playingsample : OUT    boolean 
   );
   END COMPONENT;
   COMPONENT framecounter
   PORT (
      apuclk       : IN     boolean ;
      clearintflag : IN     boolean ;
      clk          : IN     std_logic ;
      genint       : IN     boolean ;
      mode         : IN     boolean ;
      res_n        : IN     std_logic ;
      resctr       : IN     boolean ;
      fclk         : OUT    boolean ;
      frameint     : OUT    boolean ;
      hfclk        : OUT    boolean ;
      qfclk        : OUT    boolean 
   );
   END COMPONENT;
   COMPONENT noisechannel
   PORT (
      addr      : IN     boolean_vector (1 DOWNTO 0);
      clk       : IN     std_logic ;
      cpuclk    : IN     boolean ;
      data      : IN     boolean_vector (7 DOWNTO 0);
      enabled   : IN     boolean ;
      fclk      : IN     boolean ;
      qfclk     : IN     boolean ;
      res_n     : IN     std_logic ;
      wr        : IN     boolean ;
      leniszero : OUT    boolean ;
      mixed     : OUT    boolean_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT pulsechannel
   PORT (
      addr      : IN     boolean_vector (1 DOWNTO 0);
      apuclk    : IN     boolean ;
      clk       : IN     std_logic ;
      data      : IN     boolean_vector (7 DOWNTO 0);
      enabled   : IN     boolean ;
      fclk      : IN     boolean ;
      hfclk     : IN     boolean ;
      qfclk     : IN     boolean ;
      res_n     : IN     std_logic ;
      wr        : IN     boolean ;
      leniszero : OUT    boolean ;
      mixed     : OUT    boolean_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT trianglechannel
   PORT (
      addr    : IN     boolean_vector (1 DOWNTO 0);
      apuclk  : IN     boolean ;
      clk     : IN     std_logic ;
      cpuclk  : IN     boolean ;
      data    : IN     boolean_vector (7 DOWNTO 0);
      enabled : IN     boolean ;
      fclk    : IN     boolean ;
      hfclk   : IN     boolean ;
      qfclk   : IN     boolean ;
      res_n   : IN     std_logic ;
      wr      : IN     boolean ;
      iszero  : OUT    boolean ;
      mixed   : OUT    boolean_vector (3 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : apumixer USE ENTITY audiotest_lib.apumixer;
   FOR ALL : apustatusandaddrdec USE ENTITY audiotest_lib.apustatusandaddrdec;
   FOR ALL : dmcchannnel USE ENTITY audiotest_lib.dmcchannnel;
   FOR ALL : framecounter USE ENTITY audiotest_lib.framecounter;
   FOR ALL : noisechannel USE ENTITY audiotest_lib.noisechannel;
   FOR ALL : pulsechannel USE ENTITY audiotest_lib.pulsechannel;
   FOR ALL : trianglechannel USE ENTITY audiotest_lib.trianglechannel;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   apumix : apumixer
      PORT MAP (
         dmcmix   => dmcmix,
         noisemix => noisemix,
         p1mix    => p1mix,
         p2mix    => p2mix,
         trimix   => trimix,
         mix      => mix
      );
   statadrdec : apustatusandaddrdec
      PORT MAP (
         addr              => addr,
         clk               => clk,
         cpuclk            => cpuclk,
         dmcirq            => dmcirq,
         frameint          => frameint,
         noiseleniszero    => noiseleniszero,
         p1leniszero       => p1leniszero,
         p2leniszero       => p2leniszero,
         playingsample     => playingsample,
         rd                => rd,
         res_n             => res_n,
         triiszero         => triiszero,
         wr                => wr,
         addrlow2          => addrlow2,
         dmcclearintflag   => dmcclearintflag,
         dmcenabled        => dmcenabled,
         dmcwr             => dmcwr,
         frctrclearintflag => frctrclearintflag,
         genint            => genint,
         irq               => irq,
         mode              => mode,
         noiseenabled      => noiseenabled,
         noisewr           => noisewr,
         p1enabled         => p1enabled,
         p1wr              => p1wr,
         p2enabled         => p2enabled,
         p2wr              => p2wr,
         resctr            => resctr,
         trienabled        => trienabled,
         triwr             => triwr,
         wrdata            => wrdata,
         data              => data
      );
   dmc : dmcchannnel
      PORT MAP (
         addr          => addrlow2,
         clearintflag  => dmcclearintflag,
         clk           => clk,
         cpuclk        => cpuclk,
         data          => wrdata,
         dmcdata       => dmcdata,
         dmcreadack    => dmcreadack,
         enabled       => dmcenabled,
         res_n         => res_n,
         wr            => dmcwr,
         dmcaddr       => dmcaddr,
         dmcreadreq    => dmcreadreq,
         irq           => dmcirq,
         level         => dmcmix,
         playingsample => playingsample
      );
   U_2 : framecounter
      PORT MAP (
         apuclk       => apuclk,
         clearintflag => frctrclearintflag,
         clk          => clk,
         genint       => genint,
         mode         => mode,
         res_n        => res_n,
         resctr       => resctr,
         fclk         => fclk,
         frameint     => frameint,
         hfclk        => hfclk,
         qfclk        => qfclk
      );
   noise : noisechannel
      PORT MAP (
         addr      => addrlow2,
         clk       => clk,
         cpuclk    => cpuclk,
         data      => wrdata,
         enabled   => noiseenabled,
         fclk      => fclk,
         qfclk     => qfclk,
         res_n     => res_n,
         wr        => noisewr,
         leniszero => noiseleniszero,
         mixed     => noisemix
      );
   p1 : pulsechannel
      PORT MAP (
         addr      => addrlow2,
         apuclk    => apuclk,
         clk       => clk,
         data      => wrdata,
         enabled   => p1enabled,
         fclk      => fclk,
         hfclk     => hfclk,
         qfclk     => qfclk,
         res_n     => res_n,
         wr        => p1wr,
         leniszero => p1leniszero,
         mixed     => p1mix
      );
   p2 : pulsechannel
      PORT MAP (
         addr      => addrlow2,
         apuclk    => apuclk,
         clk       => clk,
         data      => wrdata,
         enabled   => p2enabled,
         fclk      => fclk,
         hfclk     => hfclk,
         qfclk     => qfclk,
         res_n     => res_n,
         wr        => p2wr,
         leniszero => p2leniszero,
         mixed     => p2mix
      );
   tri : trianglechannel
      PORT MAP (
         addr    => addrlow2,
         apuclk  => apuclk,
         clk     => clk,
         cpuclk  => cpuclk,
         data    => wrdata,
         enabled => trienabled,
         fclk    => fclk,
         hfclk   => hfclk,
         qfclk   => qfclk,
         res_n   => res_n,
         wr      => triwr,
         iszero  => triiszero,
         mixed   => trimix
      );

END struct;
