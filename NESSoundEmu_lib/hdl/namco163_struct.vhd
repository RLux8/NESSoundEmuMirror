--
-- VHDL Architecture audiotest_lib.namco163.struct
--
-- Created:
--          by - redacted.redacted (pc023)
--          at - 13:16:51 02/20/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
library audiotest_lib; use audiotest_lib.booleanvectors.all;


ARCHITECTURE struct OF namco163 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL activechannels : integer RANGE 1 TO 8;
   SIGNAL enableFSM      : boolean;
   SIGNAL ramdatain      : boolean_vector(7 DOWNTO 0);
   SIGNAL ramdataout     : boolean_vector(7 DOWNTO 0);
   SIGNAL ramwr          : boolean;
   SIGNAL wpaddr         : boolean_vector(6 DOWNTO 0);
   SIGNAL wpdatain       : boolean_vector(7 DOWNTO 0);
   SIGNAL wpdataout      : boolean_vector(7 DOWNTO 0);
   SIGNAL wpwren         : boolean := false;
   SIGNAL wram_address   : boolean_vector(6 DOWNTO 0);


   -- Component Declarations
   COMPONENT dualportramboolean
   GENERIC (
      dataw : positive;
      addrw : positive
   );
   PORT (
      addr_a    : IN     boolean_vector (addrw-1 DOWNTO 0);
      addr_b    : IN     boolean_vector (addrw-1 DOWNTO 0);
      clk       : IN     STD_LOGIC;
      datain_a  : IN     boolean_vector (dataw-1 DOWNTO 0);
      datain_b  : IN     boolean_vector (dataw-1 DOWNTO 0);
      wren_a    : IN     boolean;
      wren_b    : IN     boolean;
      dataout_a : OUT    boolean_vector (dataw-1 DOWNTO 0);
      dataout_b : OUT    boolean_vector (dataw-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT namco163statemachine
   GENERIC (
      USETDM : boolean := false
   );
   PORT (
      activechannels : IN     integer RANGE 1 TO 8;
      clk            : IN     std_logic ;
      cpuclk         : IN     boolean ;
      enableFSM      : IN     boolean ;
      ramdataout     : IN     boolean_vector (7 DOWNTO 0);
      res_n          : IN     std_logic ;
      n163mix        : OUT    boolean_vector (7 DOWNTO 0);
      ramdatain      : OUT    boolean_vector (7 DOWNTO 0);
      ramwr          : OUT    boolean ;
      wram_address   : OUT    boolean_vector (6 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT namco163writeport
   PORT (
      addr           : IN     boolean_vector (1 DOWNTO 0);
      clk            : IN     std_logic ;
      rd             : IN     boolean ;
      res_n          : IN     std_logic ;
      wpdataout      : IN     boolean_vector (7 DOWNTO 0);
      wr             : IN     boolean ;
      activechannels : OUT    integer RANGE 1 TO 8;
      enableFSM      : OUT    boolean ;
      wpaddr         : OUT    boolean_vector (6 DOWNTO 0);
      wpdatain       : OUT    boolean_vector (7 DOWNTO 0);
      wpwren         : OUT    boolean ;
      data           : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : dualportramboolean USE ENTITY audiotest_lib.dualportramboolean;
   FOR ALL : namco163statemachine USE ENTITY audiotest_lib.namco163statemachine;
   FOR ALL : namco163writeport USE ENTITY audiotest_lib.namco163writeport;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : dualportramboolean
      GENERIC MAP (
         dataw => 8,
         addrw => 7
      )
      PORT MAP (
         datain_a  => wpdatain,
         datain_b  => ramdatain,
         wren_a    => wpwren,
         wren_b    => ramwr,
         clk       => clk,
         addr_a    => wpaddr,
         addr_b    => wram_address,
         dataout_a => wpdataout,
         dataout_b => ramdataout
      );
   n163machine : namco163statemachine
      PORT MAP (
         activechannels => activechannels,
         clk            => clk,
         cpuclk         => cpuclk,
         enableFSM      => enableFSM,
         ramdataout     => ramdataout,
         res_n          => res_n,
         n163mix        => n163mix,
         ramdatain      => ramdatain,
         ramwr          => ramwr,
         wram_address   => wram_address
      );
   U_1 : namco163writeport
      PORT MAP (
         addr           => addr,
         clk            => clk,
         rd             => rd,
         res_n          => res_n,
         wpdataout      => wpdataout,
         wr             => wr,
         activechannels => activechannels,
         enableFSM      => enableFSM,
         wpaddr         => wpaddr,
         wpdatain       => wpdatain,
         wpwren         => wpwren,
         data           => data
      );

END struct;
